// School Management System Database Schema
// 
// TERMINOLOGY NOTE:
// - "branchId" in the database represents "schoolId" in the API/UI layer
// - This allows the system to support multiple schools in a multi-tenant architecture
// - Each "branch" is an independent school with its own data
// - The term "branch" is used internally for historical/technical reasons
// - All API endpoints and UI should refer to "school" for better user understanding

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Student {
  id               String             @id @default(uuid())
  branchId         String?            // Represents schoolId - which school this student belongs to
  admissionNo      String?
  firstName        String
  lastName         String
  dob              String?
  gender           String?            // male | female | other
  classId          String?
  sectionId        String?
  status           String?            @default("active") // active | inactive | graduated
  rollNumber       String?            // Add roll number for attendance display
  photoUrl         String?            // Add photo URL for visual identification
  // Soft delete fields
  deletedAt        DateTime?          // Null if not deleted, timestamp if soft deleted
  deletedBy        String?            // User ID who deleted the record
  // Note: branchId is used internally but represents schoolId in the API layer
  // This allows multi-school support where each school is a separate branch
  guardians        StudentGuardian[]  // Many-to-many relationship via junction table
  invoices         Invoice[]
  enrollments      Enrollment[]
  MarksEntry       MarksEntry[]
  AttendanceRecord AttendanceRecord[]
  periodAttendance StudentPeriodAttendance[]  // New period-based attendance
  marks            Mark[]  // New exam marks

  @@unique([admissionNo])
  @@index([deletedAt])
}

model Guardian {
  id                   String            @id @default(uuid())
  branchId             String?           // Represents schoolId - which school this guardian belongs to
  name                 String
  email                String?
  phoneNumber          String?           // Primary phone number
  alternatePhoneNumber String?           // Secondary phone number
  address              String?
  occupation           String?           // Guardian's occupation
  // Soft delete fields
  deletedAt            DateTime?         // Null if not deleted, timestamp if soft deleted
  deletedBy            String?           // User ID who deleted the record
  // Many-to-many relationship with students
  students             StudentGuardian[]
  
  @@index([branchId])
  @@index([email])
  @@index([phoneNumber])
  @@index([deletedAt])
}

// Junction table for many-to-many relationship between students and guardians
model StudentGuardian {
  id               String   @id @default(uuid())
  studentId        String
  guardianId       String
  relation         String   // father, mother, guardian, grandfather, grandmother, uncle, aunt, other
  isPrimary        Boolean  @default(false) // Primary contact for the student
  canPickup        Boolean  @default(true)  // Can pickup the student from school
  emergencyContact Boolean  @default(true) // Can be contacted in emergency
  
  student          Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  guardian         Guardian @relation(fields: [guardianId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, guardianId]) // A guardian can only have one relationship type with a student
  @@index([guardianId])
  @@index([studentId])
}

model Exam {
  id               String        @id @default(uuid())
  branchId         String?       // Represents schoolId - which school this exam belongs to
  name             String
  examType         String?       // UNIT_TEST, MONTHLY_TEST, QUARTERLY, HALF_YEARLY, ANNUAL, etc.
  academicYearId   String?       // Reference to academic year
  term             Int?          // 1, 2, or 3
  weightagePercent Float?        // 0-100 weightage in final grade
  minPassingMarks  Float?        // Minimum marks to pass
  maxMarks         Float?        // Total marks for the exam
  status           String?       @default("SCHEDULED") // SCHEDULED, ONGOING, COMPLETED, CANCELLED
  startDate        String?
  endDate          String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  // Relations
  academicYear     AcademicYear? @relation(fields: [academicYearId], references: [id])
  sessions         ExamSession[]
  marks            Mark[]
  
  @@index([branchId, academicYearId])
  @@index([branchId, status])
  @@index([branchId, examType])
}

model FeeStructure {
  id         String         @id @default(uuid())
  branchId   String?        // Represents schoolId - which school this fee structure belongs to
  gradeId    String?
  components FeeComponent[]
  schedules  FeeSchedule[]
}

model FeeComponent {
  id             String       @id @default(uuid())
  branchId       String?      // Represents schoolId - inherited from fee structure
  feeStructureId String
  name           String
  type           String?
  amount         Int
  feeStructure   FeeStructure @relation(fields: [feeStructureId], references: [id], onDelete: Cascade)
}

model FeeSchedule {
  id             String   @id @default(uuid())
  branchId       String?  // Represents schoolId - which school this fee schedule belongs to
  feeStructureId String
  recurrence     String   // monthly | quarterly | halfYearly | annual
  dueDayOfMonth  Int
  startDate      String?
  endDate        String?
  classId        String?
  sectionId      String?
  status         String?  // active | paused
  feeStructure   FeeStructure @relation(fields: [feeStructureId], references: [id], onDelete: Cascade)
}

model Invoice {
  id        String    @id @default(uuid())
  branchId  String?   // Represents schoolId - which school this invoice belongs to
  studentId String
  period    String?
  dueDate   String?
  amount    Int?
  status    String?
  // Soft delete fields
  deletedAt DateTime? // Null if not deleted, timestamp if soft deleted
  deletedBy String?   // User ID who deleted the record
  student   Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  payments  Payment[]

  @@unique([studentId, period])
  @@index([deletedAt])
}

model Application {
  id                String   @id @default(uuid())
  tenantId          String?
  branchId          String?  // Represents schoolId - which school this application is for
  programId         String?
  studentProfileRef String?
  status            String?
  score             Float?
  priorityTag       String?
  createdAt         DateTime @default(now())
}

model Tenant {
  id        String @id @default(uuid())
  branchId  String? // Optional branch association for multi-school tenants
  name      String
  subdomain String
}

model Class {
  id         String    @id @default(uuid())
  branchId   String?   // Represents schoolId - which school offers this class
  name       String
  gradeLevel Int?
  sections   Section[]
}

model Section {
  id          String       @id @default(uuid())
  branchId    String?      // Represents schoolId - which school this section belongs to
  classId     String
  name        String
  capacity    Int?
  homeroomTeacherId String?
  homeroomTeacher   Teacher?    @relation(fields: [homeroomTeacherId], references: [id], onDelete: SetNull)
  class       Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  enrollments Enrollment[]
  periods     TimetablePeriod[]
  attendanceSessions AttendanceSession[]  // Add reverse relation
}

model Enrollment {
  id        String  @id @default(uuid())
  branchId  String? // Represents schoolId - inherited from section
  studentId String
  sectionId String
  status    String?
  startDate String?
  endDate   String?
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}

model Payment {
  id        String    @id @default(uuid())
  branchId  String?   // Represents schoolId - inherited from invoice
  invoiceId String
  gateway   String?
  amount    Int?
  status    String?
  reference String?
  method    String?
  // Soft delete fields
  deletedAt DateTime? // Null if not deleted, timestamp if soft deleted
  deletedBy String?   // User ID who deleted the record
  invoice   Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([reference])
  @@index([invoiceId])
  @@index([deletedAt])
}

model ExamSession {
  id        String       @id @default(uuid())
  branchId  String?      // Represents schoolId - inherited from exam
  examId    String
  subjectId String?
  roomId    String?
  schedule  String?
  exam      Exam         @relation(fields: [examId], references: [id], onDelete: Cascade)
  marks     MarksEntry[]
}

model MarksEntry {
  id        String      @id @default(uuid())
  branchId  String?     // Represents schoolId - inherited from exam session
  studentId String
  sessionId String
  rawMarks  Float?
  grade     String?
  comments  String?
  student   Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  session   ExamSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  @@index([studentId])
  @@index([sessionId])
}

model AttendanceRecord {
  id        String  @id @default(uuid())
  branchId  String? // Represents schoolId - inherited from student
  studentId String
  date      String
  status    String?
  reason    String?
  markedBy  String?
  source    String?
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
}

model Staff {
  id             String  @id @default(uuid())
  branchId       String? // Represents schoolId - which school this staff member works at
  firstName      String
  lastName       String
  email          String?
  phone          String?
  designation    String?
  department     String?
  employmentType String?
  joinDate       String?
  status         String?
  // Soft delete fields
  deletedAt      DateTime? // Null if not deleted, timestamp if soft deleted
  deletedBy      String?   // User ID who deleted the record
  Teacher        Teacher?
  
  @@index([deletedAt])
}

model Teacher {
  id              String  @id @default(uuid())
  branchId        String? // Represents schoolId - inherited from staff
  staffId         String  @unique
  subjects        String?
  qualifications  String?
  experienceYears Int?
  // Soft delete fields
  deletedAt       DateTime? // Null if not deleted, timestamp if soft deleted
  deletedBy       String?   // User ID who deleted the record
  staff           Staff   @relation(fields: [staffId], references: [id], onDelete: Cascade)
  homeroomSections Section[]
  periods         TimetablePeriod[]
  substitutions   Substitution[]
  constraints     TeacherConstraint[]
  
  // New attendance relations
  assignedSessions    AttendanceSession[] @relation("AssignedSessions")
  actualSessions      AttendanceSession[] @relation("ActualSessions")
  markedAttendance    StudentPeriodAttendance[] @relation("MarkedAttendance")
  dailyAttendance     TeacherDailyAttendance[] @relation("TeacherAttendance")
  substitutingFor     TeacherDailyAttendance[] @relation("SubstituteFor")
  
  @@index([deletedAt])
}

// Communications Module
model Template {
  id        String     @id @default(uuid())
  branchId  String?    // Represents schoolId - which school this template belongs to
  name      String
  channel   String     // email | sms | push | whatsapp
  locale    String     @default("en")
  content   String
  variables String?    // JSON array of variable names
  campaigns Campaign[]
  messages  Message[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Campaign {
  id            String    @id @default(uuid())
  branchId      String?
  name          String
  templateId    String?
  template      Template? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  audienceQuery String?   // JSON query for selecting recipients
  schedule      DateTime?
  status        String    // draft | scheduled | active | completed | paused
  messages      Message[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Message {
  id         String    @id @default(uuid())
  branchId   String?
  channel    String    // email | sms | push | whatsapp
  to         String    // recipient identifier
  templateId String?
  template   Template? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  campaignId String?
  campaign   Campaign? @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  payload    String?   // JSON payload with variable values
  status     String    // pending | sent | delivered | failed | bounced
  providerId String?   // external provider message ID
  error      String?   // error message if failed
  sentAt     DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([status])
  @@index([campaignId])
}

model Preference {
  id         String   @id @default(uuid())
  branchId   String?
  ownerType  String   // student | guardian | staff
  ownerId    String
  channel    String   // email | sms | push | whatsapp
  consent    Boolean  @default(true)
  quietHours String?  // JSON object with start and end times
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([ownerType, ownerId, channel])
}

model Ticket {
  id          String         @id @default(uuid())
  branchId    String?
  ownerType   String         // student | guardian | staff
  ownerId     String
  category    String?        // academic | fees | technical | general
  priority    String         @default("normal") // low | normal | high | urgent
  status      String         @default("open") // open | in_progress | resolved | closed
  assigneeId  String?
  subject     String
  description String
  slaDueAt    DateTime?
  messages    TicketMessage[]
  attachments TicketAttachment[]
  resolvedAt  DateTime?
  closedAt    DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([status])
  @@index([assigneeId])
  @@index([ownerType, ownerId])
}

model TicketMessage {
  id        String   @id @default(uuid())
  branchId  String?  // Represents schoolId - inherited from ticket
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  authorId  String
  authorType String  // staff | requester
  content   String
  internal  Boolean  @default(false) // internal notes not visible to requester
  createdAt DateTime @default(now())
}

model TicketAttachment {
  id        String   @id @default(uuid())
  branchId  String?  // Represents schoolId - inherited from ticket
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  fileName  String
  fileUrl   String
  fileSize  Int?
  mimeType  String?
  createdAt DateTime @default(now())
}

// ============== TIMETABLE MODULE ==============

model Subject {
  id              String            @id @default(uuid())
  branchId        String?           // Represents schoolId - which school offers this subject
  code            String            @unique
  name            String
  description     String?
  credits         Int?
  isElective      Boolean           @default(false)
  prerequisites   String?           // JSON array of subject IDs
  periods         TimetablePeriod[]
  constraints     SubjectConstraint[]
  attendanceSessions AttendanceSession[]  // Add reverse relation
  marks           Mark[]  // New exam marks relation
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Room {
  id          String            @id @default(uuid())
  branchId    String?           // Represents schoolId - which school this room belongs to
  code        String            @unique
  name        String
  building    String?
  floor       String?
  capacity    Int
  type        String            // classroom | lab | auditorium | sports
  facilities  String?           // JSON array of facilities
  isActive    Boolean           @default(true)
  periods     TimetablePeriod[]
  constraints RoomConstraint[]
  substitutions Substitution[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model TimeSlot {
  id          String            @id @default(uuid())
  branchId    String?
  dayOfWeek   Int              // 0=Sunday, 1=Monday, etc.
  startTime   String           // HH:MM format
  endTime     String           // HH:MM format
  slotType    String           @default("regular") // regular | break | assembly
  slotOrder   Int              // Order of the slot in the day
  periods     TimetablePeriod[]
  constraints TimeSlotConstraint[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@unique([dayOfWeek, slotOrder])
  @@index([dayOfWeek])
}

model TimetablePeriod {
  id          String            @id @default(uuid())
  branchId    String?
  sectionId   String
  section     Section           @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  subjectId   String
  subject     Subject           @relation(fields: [subjectId], references: [id])
  teacherId   String
  teacher     Teacher           @relation(fields: [teacherId], references: [id])
  roomId      String?
  room        Room?             @relation(fields: [roomId], references: [id])
  timeSlotId  String
  timeSlot    TimeSlot          @relation(fields: [timeSlotId], references: [id])
  isActive    Boolean           @default(true)
  effectiveFrom DateTime        @default(now())
  effectiveTo DateTime?
  substitutions Substitution[]
  attendanceSessions AttendanceSession[]  // Add reverse relation
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@unique([sectionId, timeSlotId, effectiveFrom])
  @@index([teacherId])
  @@index([roomId])
  @@index([isActive])
}

model Substitution {
  id              String           @id @default(uuid())
  branchId        String?          // Represents schoolId - inherited from period
  periodId        String
  period          TimetablePeriod  @relation(fields: [periodId], references: [id], onDelete: Cascade)
  substituteTeacherId String?
  substituteTeacher   Teacher?     @relation(fields: [substituteTeacherId], references: [id])
  substituteRoomId    String?
  substituteRoom      Room?        @relation(fields: [substituteRoomId], references: [id])
  date            DateTime
  reason          String?
  status          String           @default("pending") // pending | approved | rejected
  approvedBy      String?
  approvedAt      DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([periodId, date])
  @@index([date])
  @@index([substituteTeacherId])
}

// Constraint Models for Timetable Generation
model SubjectConstraint {
  id          String    @id @default(uuid())
  branchId    String?   // Represents schoolId - inherited from subject
  subjectId   String
  subject     Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  type        String    // max_per_day | min_gap | preferred_slots | consecutive
  value       String    // JSON with constraint details
  priority    Int       @default(1) // 1=soft, 2=medium, 3=hard
  createdAt   DateTime  @default(now())

  @@index([subjectId])
}

model TeacherConstraint {
  id          String    @id @default(uuid())
  branchId    String?   // Represents schoolId - inherited from teacher
  teacherId   String
  teacher     Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  type        String    // max_periods_per_day | unavailable_slots | max_consecutive
  value       String    // JSON with constraint details
  priority    Int       @default(1)
  createdAt   DateTime  @default(now())

  @@index([teacherId])
}

model RoomConstraint {
  id          String    @id @default(uuid())
  branchId    String?   // Represents schoolId - inherited from room
  roomId      String
  room        Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  type        String    // unavailable_slots | reserved_for
  value       String    // JSON with constraint details
  priority    Int       @default(1)
  createdAt   DateTime  @default(now())

  @@index([roomId])
}

model TimeSlotConstraint {
  id          String    @id @default(uuid())
  branchId    String?   // Represents schoolId - inherited from time slot
  timeSlotId  String
  timeSlot    TimeSlot  @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)
  type        String    // no_core_subjects | assembly_only
  value       String    // JSON with constraint details
  priority    Int       @default(1)
  createdAt   DateTime  @default(now())

  @@index([timeSlotId])
}

model TimetableTemplate {
  id          String    @id @default(uuid())
  branchId    String?   // Represents schoolId - which school this template is for
  name        String
  description String?
  gradeLevel  Int?
  academicYear String?
  isDefault   Boolean   @default(false)
  config      String    // JSON with periods per day, working days, etc.
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// ============================================
// PERIOD-BASED ATTENDANCE MODELS
// ============================================

model AttendanceSession {
  id                String   @id @default(uuid())
  branchId          String?  // Represents schoolId
  date              DateTime // Remove @db.Date for SQLite
  periodId          String   // From TimetablePeriod
  sectionId         String
  subjectId         String
  assignedTeacherId String   // Originally assigned teacher
  actualTeacherId   String?  // Substitute if different
  startTime         DateTime?
  endTime           DateTime?
  status            String   @default("scheduled") // scheduled, in-progress, completed, cancelled
  lockedAt          DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  period            TimetablePeriod @relation(fields: [periodId], references: [id])
  section           Section @relation(fields: [sectionId], references: [id])
  subject           Subject @relation(fields: [subjectId], references: [id])
  assignedTeacher   Teacher @relation("AssignedSessions", fields: [assignedTeacherId], references: [id])
  actualTeacher     Teacher? @relation("ActualSessions", fields: [actualTeacherId], references: [id])
  studentRecords    StudentPeriodAttendance[]
  
  @@index([date, sectionId])
  @@index([date, assignedTeacherId])
  @@unique([date, periodId, sectionId])
}

model StudentPeriodAttendance {
  id           String   @id @default(uuid())
  sessionId    String
  studentId    String
  status       String   // present, absent, late, excused, medical, suspended, activity
  minutesLate  Int?
  reason       String?
  notes        String?
  markedAt     DateTime
  markedBy     String   // Teacher ID who marked attendance
  
  // Relations
  session      AttendanceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  student      Student @relation(fields: [studentId], references: [id])
  marker       Teacher @relation("MarkedAttendance", fields: [markedBy], references: [id])
  
  @@unique([sessionId, studentId])
  @@index([studentId, status])
  @@index([sessionId])
}

model TeacherDailyAttendance {
  id           String   @id @default(uuid())
  branchId     String?  // Represents schoolId
  teacherId    String
  date         DateTime // Remove @db.Date for SQLite
  checkIn      DateTime?
  checkOut     DateTime?
  status       String   // present, absent, leave, holiday, half-day
  leaveType    String?
  substituteId String?  // Who's substituting for this teacher
  totalHours   Float?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  teacher      Teacher @relation("TeacherAttendance", fields: [teacherId], references: [id])
  substitute   Teacher? @relation("SubstituteFor", fields: [substituteId], references: [id])
  
  @@unique([teacherId, date])
  @@index([date, status])
}

// ========== Academic Year Management ==========
model AcademicYear {
  id        String   @id @default(uuid())
  branchId  String   // REQUIRED - Each branch has its own academic calendar
  name      String   // "2024-25"
  startDate String
  endDate   String
  terms     String?  // JSON string - Array of terms with dates
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  exams     Exam[]
  
  @@unique([branchId, name])
  @@index([branchId, isActive])
}

// ========== Exam Templates (Master Tables) ==========
model ExamTemplate {
  id                String   @id @default(uuid())
  boardType         String?  // CBSE, ICSE, STATE_BOARD, CUSTOM
  examType          String   // UNIT_TEST, MONTHLY_TEST, QUARTERLY, etc.
  name              String   // Template name e.g., "CBSE Class 10 Board Exam"
  description       String?
  term              Int?     // 1, 2, or 3
  weightagePercent  Float?   // 0-100
  minPassingMarks   Float?
  maxMarks          Float?
  isGraded          Boolean  @default(false)
  affectsPromotion  Boolean  @default(true)
  applicableClasses String?  // JSON string - Array of applicable class levels
  suggestedDuration Int?     // Suggested exam duration in days
  isSystemTemplate  Boolean  @default(false) // System-provided vs custom
  createdBy         String?  // User who created custom template
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// ========== Marks Management ==========
model Mark {
  id             String    @id @default(uuid())
  branchId       String    // REQUIRED - For data isolation
  examId         String
  subjectId      String
  studentId      String
  theoryMarks    Float?
  practicalMarks Float?
  projectMarks   Float?
  internalMarks  Float?
  totalMarks     Float?
  grade          String?
  remarks        String?
  isAbsent       Boolean   @default(false)
  evaluatedBy    String?   // Teacher ID
  evaluatedAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relations
  exam           Exam      @relation(fields: [examId], references: [id])
  subject        Subject   @relation(fields: [subjectId], references: [id])
  student        Student   @relation(fields: [studentId], references: [id])
  
  @@unique([examId, subjectId, studentId])
  @@index([branchId, studentId])
  @@index([branchId, examId])
}

// ========== Grading System ==========
model GradingScale {
  id             String   @id @default(uuid())
  branchId       String   // REQUIRED - Branch-specific grading
  name           String
  type           String   // MARKS, GRADE, CGPA, PERCENTAGE
  isDefault      Boolean  @default(false)
  grades         String   // JSON string - Array of GradeRange objects
  applicableFrom String?  // Academic year
  applicableTo   String?  // Academic year
  classes        String?  // JSON string - Applicable classes
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([branchId, isDefault])
}

// ========== Audit Log ==========
model AuditLog {
  id             String   @id @default(uuid())
  branchId       String?  // Branch/School where action occurred
  userId         String?  // User who performed the action
  userEmail      String?  // User email for reference
  action         String   // CREATE, UPDATE, DELETE, SOFT_DELETE, RESTORE, LOGIN, LOGOUT
  method         String   // GET, POST, PUT, PATCH, DELETE
  endpoint       String   // API endpoint path
  entityType     String?  // Model/Entity type affected
  entityId       String?  // ID of the affected entity
  oldData        String?  // JSON string of old data (for updates/deletes)
  newData        String?  // JSON string of new data (for creates/updates)
  ipAddress      String?  // Client IP address
  userAgent      String?  // Browser/client user agent
  statusCode     Int?     // HTTP response status code
  errorMessage   String?  // Error message if request failed
  duration       Int?     // Request duration in milliseconds
  createdAt      DateTime @default(now())
  
  @@index([branchId])
  @@index([userId])
  @@index([entityType, entityId])
  @@index([action])
  @@index([createdAt])
}

