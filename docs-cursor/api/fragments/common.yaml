components:
  parameters:
    PageParam:
      in: query
      name: page
      schema: { type: integer, minimum: 1, default: 1 }
    PageSizeParam:
      in: query
      name: pageSize
      schema: { type: integer, minimum: 1, maximum: 200, default: 25 }
    SortParam:
      in: query
      name: sort
      schema: { type: string }
  schemas:
    Error:
      type: object
      properties:
        code: { type: string }
        message: { type: string }
        details: { type: object }
    Meta:
      type: object
      properties:
        page: { type: integer }
        pageSize: { type: integer }
        total: { type: integer }
        hasNext: { type: boolean }
  responses:
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    ForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    ConflictError:
      description: Conflict
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    UnprocessableError:
      description: Unprocessable Entity
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    RateLimitError:
      description: Too Many Requests
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    ServerError:
      description: Server Error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
